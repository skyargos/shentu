syntax = "proto3";
package shentu.gov.v1alpha1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/gov/v1beta1/gov.proto";
import "cosmos/gov/v1beta1/query.proto";

import "shentu/gov/v1alpha1/gov.proto";

option go_package = "github.com/shentufoundation/shentu/x/gov/types";

// Query defines the gRPC querier service for gov module
service Query {
  // Proposal queries proposal details based on ProposalID.
  rpc Proposal(cosmos.gov.v1beta1.QueryProposalRequest) returns (QueryProposalResponse) {
    option (google.api.http).get = "/cosmos/gov/v1beta1/proposals/{proposal_id}";
  }

  // Proposals queries all proposals based on given status.
  rpc Proposals(cosmos.gov.v1beta1.QueryProposalsRequest) returns (cosmos.gov.v1beta1.QueryProposalsResponse) {
    option (google.api.http).get = "/cosmos/gov/v1beta1/proposals";
  }

  // Vote queries voted information based on proposalID, voterAddr.
  rpc Vote(cosmos.gov.v1beta1.QueryVoteRequest) returns (cosmos.gov.v1beta1.QueryVoteResponse) {
    option (google.api.http).get = "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}";
  }

  // Votes queries votes of a given proposal.
  rpc Votes(cosmos.gov.v1beta1.QueryVotesRequest) returns (cosmos.gov.v1beta1.QueryVotesResponse) {
    option (google.api.http).get = "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes";
  }

  // Params queries all parameters of the gov module.
  rpc Params(cosmos.gov.v1beta1.QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmos/gov/v1beta1/params/{params_type}";
  }

  // Deposit queries single deposit information based proposalID, depositAddr.
  rpc Deposit(cosmos.gov.v1beta1.QueryDepositRequest) returns (cosmos.gov.v1beta1.QueryDepositResponse) {
    option (google.api.http).get = "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}";
  }

  // Deposits queries all deposits of a single proposal.
  rpc Deposits(cosmos.gov.v1beta1.QueryDepositsRequest) returns (cosmos.gov.v1beta1.QueryDepositsResponse) {
    option (google.api.http).get = "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits";
  }

  // TallyResult queries the tally of a proposal vote.
  rpc TallyResult(cosmos.gov.v1beta1.QueryTallyResultRequest) returns (cosmos.gov.v1beta1.QueryTallyResultResponse) {
    option (google.api.http).get = "/cosmos/gov/v1beta1/proposals/{proposal_id}/tally";
  }
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
message QueryProposalResponse {
  cosmos.gov.v1beta1.Proposal proposal = 1 [(gogoproto.nullable) = false];
  bool cert_voted = 2 [ (gogoproto.moretags) = "yaml:\"cert_voted\"" ];
}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // voting_params defines the parameters related to voting.
  cosmos.gov.v1beta1.VotingParams voting_params = 1 [(gogoproto.nullable) = false];
  // deposit_params defines the parameters related to deposit.
  cosmos.gov.v1beta1.DepositParams deposit_params = 2 [(gogoproto.nullable) = false];
  // tally_params defines the parameters related to tally.
  cosmos.gov.v1beta1.TallyParams tally_params = 3 [(gogoproto.nullable) = false];
  // custom_params defines the parameters related to custom.
  CustomParams custom_params =4 [(gogoproto.nullable) = false];
}
