// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/gov/v1alpha1/gov.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/gov/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DepositParams defines the params for deposits on governance proposals.
type DepositParams struct {
	//  Minimum initial deposit for a proposal to enter voting period.
	MinInitialDeposit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=min_initial_deposit,json=minInitialDeposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_initial_deposit,omitempty" yaml:"min_initial_deposit"`
	// Minimum deposit for a proposal to enter voting period.
	MinDeposit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=min_deposit,json=minDeposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_deposit,omitempty" yaml:"min_deposit"`
	//  Maximum period for CTK holders to deposit on a proposal. Initial value: 2
	//  months.
	MaxDepositPeriod time.Duration `protobuf:"bytes,3,opt,name=max_deposit_period,json=maxDepositPeriod,proto3,stdduration" json:"max_deposit_period,omitempty" yaml:"max_deposit_period"`
}

func (m *DepositParams) Reset()      { *m = DepositParams{} }
func (*DepositParams) ProtoMessage() {}
func (*DepositParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce5b0b452eb2673, []int{0}
}
func (m *DepositParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositParams.Merge(m, src)
}
func (m *DepositParams) XXX_Size() int {
	return m.Size()
}
func (m *DepositParams) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositParams.DiscardUnknown(m)
}

var xxx_messageInfo_DepositParams proto.InternalMessageInfo

// TallyParams defines the params for tallying votes on governance proposals.
type TallyParams struct {
	DefaultTally                     *types1.TallyParams `protobuf:"bytes,1,opt,name=default_tally,json=defaultTally,proto3" json:"default_tally,omitempty"`
	CertifierUpdateSecurityVoteTally *types1.TallyParams `protobuf:"bytes,2,opt,name=certifier_update_security_vote_tally,json=certifierUpdateSecurityVoteTally,proto3" json:"certifier_update_security_vote_tally,omitempty"`
	CertifierUpdateStakeVoteTally    *types1.TallyParams `protobuf:"bytes,3,opt,name=certifier_update_stake_vote_tally,json=certifierUpdateStakeVoteTally,proto3" json:"certifier_update_stake_vote_tally,omitempty"`
}

func (m *TallyParams) Reset()      { *m = TallyParams{} }
func (*TallyParams) ProtoMessage() {}
func (*TallyParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce5b0b452eb2673, []int{1}
}
func (m *TallyParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TallyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TallyParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TallyParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TallyParams.Merge(m, src)
}
func (m *TallyParams) XXX_Size() int {
	return m.Size()
}
func (m *TallyParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TallyParams.DiscardUnknown(m)
}

var xxx_messageInfo_TallyParams proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DepositParams)(nil), "shentu.gov.v1alpha1.DepositParams")
	proto.RegisterType((*TallyParams)(nil), "shentu.gov.v1alpha1.TallyParams")
}

func init() { proto.RegisterFile("shentu/gov/v1alpha1/gov.proto", fileDescriptor_3ce5b0b452eb2673) }

var fileDescriptor_3ce5b0b452eb2673 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0x93, 0x56, 0x62, 0x48, 0x39, 0x09, 0x72, 0x20, 0xb5, 0xd5, 0xd5, 0x29, 0x15, 0xc3,
	0x0d, 0x90, 0xa8, 0xb0, 0x31, 0x96, 0x32, 0xb0, 0xa1, 0x72, 0x30, 0xb0, 0x44, 0x6e, 0xe2, 0xa6,
	0xd6, 0xc5, 0x79, 0x51, 0xec, 0x54, 0xcd, 0xc6, 0x27, 0x40, 0x8c, 0x48, 0x7c, 0x03, 0x16, 0x76,
	0x3e, 0x41, 0xc7, 0x1b, 0x6f, 0xea, 0x71, 0xed, 0xc6, 0xc8, 0xca, 0x82, 0x62, 0x3b, 0xa5, 0xd7,
	0x9e, 0xc4, 0xe9, 0xa6, 0xf6, 0xbd, 0xbf, 0xdf, 0xff, 0xfd, 0xec, 0xe7, 0xd8, 0xea, 0xf0, 0x29,
	0x49, 0x44, 0xee, 0x45, 0x30, 0xf3, 0x66, 0x7d, 0x1c, 0xa7, 0x53, 0xdc, 0x2f, 0x03, 0x37, 0xcd,
	0x40, 0x80, 0x7d, 0xa8, 0x64, 0xb7, 0xcc, 0x54, 0x72, 0x1b, 0x05, 0xc0, 0x19, 0x70, 0x6f, 0x8c,
	0x39, 0xf1, 0x66, 0xfd, 0x31, 0x11, 0xb8, 0xef, 0x05, 0x40, 0x13, 0x55, 0xd4, 0x3e, 0xd2, 0xba,
	0xf2, 0x54, 0xf2, 0xc6, 0xb2, 0xdd, 0x52, 0xaa, 0x2f, 0x23, 0x4f, 0x05, 0x5a, 0x7a, 0x10, 0x41,
	0x04, 0x2a, 0x5f, 0xfe, 0xd3, 0x59, 0x27, 0x02, 0x88, 0x62, 0xe2, 0xc9, 0x68, 0x9c, 0x4f, 0x3c,
	0x41, 0x19, 0xe1, 0x02, 0xb3, 0xb4, 0x72, 0xdc, 0x5d, 0x80, 0x93, 0x42, 0x4b, 0x68, 0x57, 0x0a,
	0xf3, 0x0c, 0x0b, 0x0a, 0x1a, 0xb5, 0xf7, 0xa7, 0x6e, 0x1d, 0x0c, 0x49, 0x0a, 0x9c, 0x8a, 0x37,
	0x38, 0xc3, 0x8c, 0xdb, 0x3f, 0x4c, 0xeb, 0x90, 0xd1, 0xc4, 0xa7, 0x09, 0x15, 0x14, 0xc7, 0x7e,
	0xa8, 0xd4, 0xa6, 0xd9, 0xad, 0x1f, 0x37, 0x9e, 0xb5, 0x5c, 0x0d, 0x5c, 0xee, 0xdd, 0xd5, 0x9b,
	0x73, 0x5f, 0x02, 0x4d, 0x06, 0xb0, 0x58, 0x3a, 0xc6, 0xaf, 0xa5, 0xd3, 0xb9, 0xa6, 0xfa, 0x09,
	0x30, 0x2a, 0x08, 0x4b, 0x45, 0xf1, 0x7b, 0xe9, 0xb4, 0x0b, 0xcc, 0xe2, 0x17, 0xbd, 0x6b, 0x96,
	0xf5, 0xbe, 0x5d, 0x38, 0xc7, 0x11, 0x15, 0xd3, 0x7c, 0xec, 0x06, 0xc0, 0xf4, 0xe1, 0xe8, 0x9f,
	0xa7, 0x3c, 0x3c, 0xf5, 0x44, 0x91, 0x12, 0x2e, 0xfb, 0xf1, 0xd1, 0x7d, 0x46, 0x93, 0xd7, 0xca,
	0x40, 0x6f, 0xc1, 0xfe, 0x6a, 0x5a, 0x8d, 0xd2, 0xb7, 0x82, 0xae, 0xfd, 0x0f, 0xda, 0xd7, 0xd0,
	0x0f, 0xb7, 0xaa, 0xae, 0xc0, 0xda, 0xff, 0x60, 0x6f, 0x05, 0x69, 0x31, 0x9a, 0x54, 0x74, 0x9f,
	0x4c, 0xcb, 0x66, 0x78, 0x5e, 0x19, 0xf9, 0x29, 0xc9, 0x28, 0x84, 0xcd, 0x7a, 0xd7, 0x94, 0x90,
	0x6a, 0x54, 0x6e, 0x35, 0x2a, 0x77, 0xa8, 0x47, 0x35, 0x78, 0xa5, 0x21, 0x8f, 0xf6, 0x8b, 0xaf,
	0xb0, 0xb6, 0x34, 0xeb, 0xde, 0xaa, 0xde, 0x97, 0x0b, 0xc7, 0x1c, 0xdd, 0x63, 0x78, 0x5e, 0xcd,
	0x5a, 0xa5, 0xbf, 0xd7, 0xac, 0xc6, 0x09, 0x8e, 0xe3, 0x42, 0xcf, 0x7e, 0x68, 0x1d, 0x84, 0x64,
	0x82, 0xf3, 0x58, 0xf8, 0xa2, 0x4c, 0x37, 0x4d, 0x89, 0xe6, 0x54, 0xe7, 0xa7, 0xbe, 0x02, 0x75,
	0x7c, 0x5b, 0x75, 0xa3, 0xbb, 0xba, 0x4a, 0xe6, 0x6c, 0xb0, 0x1e, 0x07, 0x24, 0x13, 0x74, 0x42,
	0x49, 0xe6, 0xe7, 0x69, 0x88, 0x05, 0xf1, 0x39, 0x09, 0xf2, 0x8c, 0x8a, 0xc2, 0x9f, 0x81, 0x20,
	0xda, 0xbc, 0x76, 0x33, 0xf3, 0xee, 0xc6, 0xec, 0x9d, 0xf4, 0x7a, 0xab, 0xad, 0xde, 0x83, 0x20,
	0xaa, 0x21, 0xb5, 0x1e, 0xed, 0x37, 0x14, 0xf8, 0x94, 0x6c, 0x77, 0xab, 0xdf, 0xac, 0x5b, 0x67,
	0xb7, 0x5b, 0xe9, 0xb3, 0x69, 0x35, 0x38, 0x59, 0x5c, 0x22, 0xe3, 0xfc, 0x12, 0x19, 0x1f, 0x57,
	0xc8, 0x58, 0xac, 0x90, 0x79, 0xb6, 0x42, 0xe6, 0xcf, 0x15, 0x32, 0x3f, 0xaf, 0x91, 0x71, 0xb6,
	0x46, 0xc6, 0xf9, 0x1a, 0x19, 0x1f, 0xdc, 0xad, 0xeb, 0xa1, 0x1e, 0x90, 0x09, 0xe4, 0x49, 0x28,
	0xa7, 0xa9, 0x13, 0xde, 0x5c, 0x3e, 0x0f, 0xf2, 0xaa, 0x8c, 0xef, 0xc8, 0x99, 0x3f, 0xff, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x11, 0x78, 0xbd, 0x89, 0x8d, 0x04, 0x00, 0x00,
}

func (m *DepositParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxDepositPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxDepositPeriod):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGov(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.MinDeposit) > 0 {
		for iNdEx := len(m.MinDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MinInitialDeposit) > 0 {
		for iNdEx := len(m.MinInitialDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinInitialDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TallyParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TallyParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TallyParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CertifierUpdateStakeVoteTally != nil {
		{
			size, err := m.CertifierUpdateStakeVoteTally.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CertifierUpdateSecurityVoteTally != nil {
		{
			size, err := m.CertifierUpdateSecurityVoteTally.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DefaultTally != nil {
		{
			size, err := m.DefaultTally.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGov(dAtA []byte, offset int, v uint64) int {
	offset -= sovGov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MinInitialDeposit) > 0 {
		for _, e := range m.MinInitialDeposit {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	if len(m.MinDeposit) > 0 {
		for _, e := range m.MinDeposit {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxDepositPeriod)
	n += 1 + l + sovGov(uint64(l))
	return n
}

func (m *TallyParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTally != nil {
		l = m.DefaultTally.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	if m.CertifierUpdateSecurityVoteTally != nil {
		l = m.CertifierUpdateSecurityVoteTally.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	if m.CertifierUpdateStakeVoteTally != nil {
		l = m.CertifierUpdateStakeVoteTally.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	return n
}

func sovGov(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGov(x uint64) (n int) {
	return sovGov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitialDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinInitialDeposit = append(m.MinInitialDeposit, types.Coin{})
			if err := m.MinInitialDeposit[len(m.MinInitialDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDeposit = append(m.MinDeposit, types.Coin{})
			if err := m.MinDeposit[len(m.MinDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepositPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxDepositPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TallyParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TallyParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TallyParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTally", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultTally == nil {
				m.DefaultTally = &types1.TallyParams{}
			}
			if err := m.DefaultTally.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertifierUpdateSecurityVoteTally", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertifierUpdateSecurityVoteTally == nil {
				m.CertifierUpdateSecurityVoteTally = &types1.TallyParams{}
			}
			if err := m.CertifierUpdateSecurityVoteTally.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertifierUpdateStakeVoteTally", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertifierUpdateStakeVoteTally == nil {
				m.CertifierUpdateStakeVoteTally = &types1.TallyParams{}
			}
			if err := m.CertifierUpdateStakeVoteTally.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGov(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGov
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGov
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGov
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGov
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGov        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGov          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGov = fmt.Errorf("proto: unexpected end of group")
)
